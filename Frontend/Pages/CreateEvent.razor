@page "/CreateEvent"
@using BusinessLogic.Entities
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Os meus eventos</h3>
<link href="/css/list-user.css" rel="stylesheet" />
<button @onclick="OpenModal">Add Event</button>

<div class="modal" style="display: @(isModalOpen ? "block" : "none")">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        <h4>Add Event</h4>
        <p>
            <label for="modal-name">Name:</label>
            <input type="text" id="modal-name" @bind="@ModalName" />
        </p>
        <p>
            <label for="modal-date">Date:</label>
            <input type="datetime-local" id="modal-date" @bind="@ModalDate" />
        </p>
        <p>
            <label for="modal-location">Location:</label>
            <input type="text" id="modal-location" @bind="@ModalLocation" />
        </p>
        <p>
            <label for="modal-description">Description:</label>
            <textarea id="modal-description" @bind="@ModalDescription"></textarea>
        </p>
        <p>
            <label for="modal-maxcapacity">Max Capacity:</label>
            <input type="number" id="modal-maxcapacity" @bind="@ModalMaxCapacity" />
        </p>
        <p>@modalAddEventMessage</p>
        <p>
            <button @onclick="PerformAddEvent">Save</button>
            <button @onclick="CloseModal">Cancel</button>
        </p>
    </div>
</div>

<div class="modal" style="display: @(isTicketModalOpen ? "block" : "none")">
    <div class="modal-content">
        <span class="close" @onclick="CloseTicketModal">&times;</span>
        <h4>Add Tickets</h4>
        <p>
            <label for="ticket-price">Price:</label>
            <input type="number" id="ticket-price" step="0.01" @bind="@TicketPrice" />
        </p>
        <p>
            <label for="ticket-name">Name:</label>
            <input type="text" id="ticket-name" @bind="@TicketName" />
        </p>
        <p>
            <label for="ticket-description">Description:</label>
            <textarea id="ticket-description" @bind="@TicketDescription"></textarea>
        </p>
        <p>
            <label for="ticket-quantity">Quantity:</label>
            <input type="number" id="ticket-quantity" @bind="@TicketQuantity" />
        </p>
        <p>@modalAddTicketMessage</p>
        <p>
            <button @onclick="PerformAddTicket">Save</button>
            <button @onclick="CloseTicketModal">Cancel</button>
        </p>
    </div>
</div>

@if (events == null)
{
    <p>Loading...</p>
}

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Date</th>
            <th>Location</th>
            <th>Description</th>
            <th>Max Capacity</th>
            <th>Tickets</th>
            <th>Add Tickets</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in events)
        {
            if (item.UserId.Equals(CurrentUser.UserId))
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@item.Location</td>
                    <td>@item.Description</td>
                    <td>@item.MaxCapacity</td>
                    <td>
                        @if (item.Tickets != null && item.Tickets.Count > 0)
                        {
                            <ul>
                                @foreach (var ticket in item.Tickets)
                                {
                                    <li>
                                        <p>Name: @ticket.Name</p>
                                        <p>Description: @ticket.Description</p>
                                        <p>Quantity: @ticket.Quantity  -> Price: @ticket.Price.ToString("0.00")€/un</p>
                                        <button @onclick="() => RemoveTicket(item.EventId, ticket.TicketId)">Remove</button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>No tickets available</p>
                        }
                    </td>
                    <td>
                        <button @onclick="() => OpenTicketModal(item.EventId)">Add Tickets</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private Event[] events;
    private readonly Event newEvent = new();
    private AuthDto CurrentUser { get; set; }
    private string ModalName { get; set; }
    private DateTime ModalDate { get; set; }
    private string ModalLocation { get; set; }
    private string ModalDescription { get; set; }
    private int ModalMaxCapacity { get; set; }
    private string modalAddEventMessage;
    private bool isModalOpen;

    private Guid selectedEventId;
    private bool isTicketModalOpen;
    private decimal TicketPrice { get; set; }
    private string TicketName { get; set; }
    private string TicketDescription { get; set; }
    private int TicketQuantity { get; set; }
    private string modalAddTicketMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        CurrentUser = await GetCurrentUser();
    }

    private async Task LoadEvents()
    {
        events = await httpClient.GetFromJsonAsync<Event[]>("http://localhost:5052/api/Events");
    }

    private async Task<AuthDto> GetCurrentUser()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJson))
        {
            var currentUser = JsonSerializer.Deserialize<AuthDto>(userJson);
            if (!currentUser.Role.Equals("User", StringComparison.OrdinalIgnoreCase))
            {
                Navigation.NavigateTo("/login", true);
            }
            return currentUser;
        }
        Navigation.NavigateTo("/login", true);
        return null;
    }

    private void OpenModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        modalAddEventMessage = null;
    }

    private async Task PerformAddEvent()
    {
        var @event = new Event
        {
            Name = ModalName,
            Date = ModalDate,
            Location = ModalLocation,
            Description = ModalDescription,
            MaxCapacity = ModalMaxCapacity,
            UserId = CurrentUser.UserId
        };

        var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/Events", @event);

        if (response.IsSuccessStatusCode)
        {
            modalAddEventMessage = "Event added successfully!";
            CloseModal();
            await LoadEvents(); // Recarrega os eventos após a adição
        }
        else
        {
            modalAddEventMessage = "Failed to add the event. Please try again.";
        }
    }

    private void OpenTicketModal(Guid eventId)
    {
        selectedEventId = eventId;
        isTicketModalOpen = true;
    }

    private void CloseTicketModal()
    {
        selectedEventId = Guid.Empty;
        isTicketModalOpen = false;
        modalAddTicketMessage = null;
    }

    private async Task PerformAddTicket()
    {
        var ticket = new Ticket
        {
            Price = TicketPrice,
            Name = TicketName,
            Description = TicketDescription,
            Quantity = TicketQuantity,
            EventId = selectedEventId
        };

        var response = await httpClient.PostAsJsonAsync("http://localhost:5052/api/Tickets", ticket);

        if (response.IsSuccessStatusCode)
        {
            modalAddTicketMessage = "Ticket added successfully!";
            CloseTicketModal();
            await LoadEvents(); // Recarrega os eventos após a adição do ticket
        }
        else
        {
            modalAddTicketMessage = "Failed to add the ticket. Please try again.";
        }
    }

    private async Task RemoveTicket(Guid eventId, Guid ticketId)
    {
        var response = await httpClient.DeleteAsync($"http://localhost:5052/api/Tickets/{ticketId}");

        if (response.IsSuccessStatusCode)
        {
            await LoadEvents(); // Recarrega os eventos após a remoção do ticket
        }
    }
}
