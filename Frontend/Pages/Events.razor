@page "/Events"
@using BusinessLogic.Entities
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<h3>Eventos Gerais</h3>

@if (events == null)
{
    <p>Loading...</p>
}
<table class="table">
    <thead>
    <tr>
        <th>Event ID</th>
        <th>Name</th>
        <th>Date</th>
        <th>Location</th>
        <th>Description</th>
        <th>Max Capacity</th>
        <th>Tickets</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in events)
    {
        if (item.UserId.Equals(CurrentUser.UserId))
        {
            <tr>
                <td>@item.EventId</td>
                <td>@item.Name</td>
                <td>@item.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>@item.Location</td>
                <td>@item.Description</td>
                <td>@item.MaxCapacity</td>
                <td>
                    @if (item.Tickets != null && item.Tickets.Count > 0)
                    {
                        <ul>
                            @foreach (var ticket in item.Tickets)
                            {
                                <li>
                                    <p>Ticket ID: @ticket.TicketId</p>
                                    <p>Price: @ticket.Price.ToString("0.00")</p>
                                    <p>Name: @ticket.Name</p>
                                    <p>Description: @ticket.Description</p>
                                    <p>Quantity: @ticket.Quantity</p>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No tickets available</p>
                    }
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private Event[] events;
    private readonly Event newEvent = new();
    private AuthDto CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
    events = await httpClient.GetFromJsonAsync<Event[]>("http://localhost:5052/api/Events");
        CurrentUser = await GetCurrentUser();
   }

    private async Task<AuthDto> GetCurrentUser()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJson))
        {
            var currentUser = JsonSerializer.Deserialize<AuthDto>(userJson);
            if (!currentUser.Role.Equals("User", StringComparison.OrdinalIgnoreCase))
            {
                Navigation.NavigateTo("/login", true);
            }
            return currentUser;
        }
        Navigation.NavigateTo("/login", true);
        return null;
    }
}
