@page "/Registeruser"
@using BusinessLogic.Entities
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Register User</h3>
<p>
     <label for="name">Name:</label>
     <input type="text" id="name" @bind="@Name"/>
</p>
<p>
    <label for="email">Email:</label>
    <input type="email" id="email" @bind="@Email"/>
</p>
<p>
    <label for="username">Username:</label>
    <input type="text" id="username" @bind="@Username"/>
</p>
<p>
    <label for="password">Password:</label>
    <input type="password" id="password" @bind="@Password"/>
</p>
<p>
    <label for="role">Role:</label>
    <select id="role" @bind="@Role">
        <option value="User">User</option>
        <option value="UserManager">UserManager</option>
        <option value="Admin">Admin</option>
    </select>
</p>

<p>@registerMessage</p>
<p>
    <button @onclick="PerformRegister">Register</button>
</p>

@code {
    private string Email { get; set; }
    private string Username { get; set; }
    private string Password { get; set; }
    private string Name { get; set; }
    private string Role { get; set; } = "User";
    private string registerMessage;

    private async Task PerformRegister()
    {
        var user = new User
        {
            Email = Email,
            Username = Username,
            Password = Password,
            Name = Name,
            Role = Role,
            Enable = true
        };

        var response = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/Users", user);

        if (response.IsSuccessStatusCode)
        {
            var createdUser = await response.Content.ReadFromJsonAsync<User>();

            registerMessage = "User registration successful!";
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            registerMessage = "User registration failed: " + errorMessage;
        }
    }
}
