@page "/registerinevents"
@using BusinessLogic.Entities
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Eventos</h3>

@if (events == null)
{
    <p>Loading...</p>
}
<table class="table">
    <thead>
        <tr>
            <th>Event Name</th>
            <th>Date</th>
            <th>Location</th>
            <th>Description</th>
            <th>Max Capacity</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in events)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>@item.Location</td>
                <td>@item.Description</td>
                <td>@item.MaxCapacity</td>
                <td>
                    @if (IsRegistered(item.EventId))
                    {
                        <button @onclick="() => CancelRegistration(item.EventId, currentUser.UserId)">Cancelar Inscrição</button>
                    }
                    else
                    {
                        <button @onclick="() => RegisterEvent(item.EventId)">Registrar no Evento</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Event> events;
    private List<Guid> registeredEventIds;
    private AuthDto currentUser;

    protected override async Task OnInitializedAsync()
    {
        events = await httpClient.GetFromJsonAsync<List<Event>>("http://localhost:5052/api/Events");
        currentUser = await GetCurrentUser();
        await UpdateRegisteredEventIds();
    }

    private async Task UpdateRegisteredEventIds()
    {
        if (currentUser != null)
        {
            registeredEventIds = await GetRegisteredEventIds();
        }
        else
        {
            registeredEventIds = new List<Guid>();
        }
    }

    private async Task<List<Guid>> GetRegisteredEventIds()
    {
        var userEvents = await httpClient.GetFromJsonAsync<List<UserEvent>>($"http://localhost:5052/api/UserEvents?userId={currentUser.UserId}");
        if (userEvents != null)
        {
            return userEvents.Select(ue => ue.EventId).ToList();
        }
        return new List<Guid>();
    }

    private bool IsRegistered(Guid eventId)
    {
        return registeredEventIds.Contains(eventId);
    }

    private async Task RegisterEvent(Guid eventId)
    {
        var userEvent = new UserEvent
        {
            EventId = eventId,
            UserId = currentUser.UserId,
            Feedback = string.Empty
        };

        await httpClient.PostAsJsonAsync("http://localhost:5052/api/UserEvents", userEvent);
        await UpdateRegisteredEventIds();
    }

    private async Task CancelRegistration(Guid eventId, Guid userId)
    {
        if (currentUser != null)
        {
            await httpClient.DeleteAsync($"http://localhost:5052/api/UserEvents/{eventId}/{userId}");
            await UpdateRegisteredEventIds();
        }
    }

    private async Task<AuthDto> GetCurrentUser()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJson))
        {
            return JsonSerializer.Deserialize<AuthDto>(userJson);
        }
        return null;
    }
}
