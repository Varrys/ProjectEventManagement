@page "/Login"
@using BusinessLogic.Entities
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Login</h3>
<p>
    <label for="username">Username:</label>
    <input type="text" id="username" @bind="@Username" />
</p>
<p>
    <label for="password">Password:</label>
    <input type="password" id="password" @bind="@Password" />
</p>
<p>@loginMessage</p>
<p>
    <button @onclick="PerformLogin">Login</button>
</p>

@code {
    private string Username { get; set; }
    private string Password { get; set; }
    private string loginMessage;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await GetCurrentUser();
        if (currentUser != null)
        {
            // User is already logged in, redirect to the home page or perform other actions
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task PerformLogin()
    {
        var request = new AuthenticationRequest
        {
            Username = Username,
            Password = Password
        };

        var response = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/auth/login", request);

        if (response.IsSuccessStatusCode)
        {
            var authenticationResponse = await response.Content.ReadFromJsonAsync<AuthenticationResponse>();
            var token = authenticationResponse.Token;
            var auth = authenticationResponse.Auth;

            if (auth == null)
            {
                loginMessage = "Utilizador não encontrado.";
                return;
            }

            if (auth.Enable.Equals("false"))
            {
                loginMessage = "A sua conta está desativada.";
                return;
            }

            var userJson = JsonSerializer.Serialize(auth);
            await JSRuntime.InvokeAsync<object>("sessionStorage.setItem", "user", userJson);

            NavigationManager.NavigateTo("/", true);

            loginMessage = "Login bem-sucedido!";
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            loginMessage = "Login falhou: " + errorMessage;
        }
    }

    private async Task<AuthDto> GetCurrentUser()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        var auth = JsonSerializer.Deserialize<AuthDto>(userJson);
        
        if (auth != null && !auth.Enable)
        {
            return null;
        }

        return auth;
    }
}
