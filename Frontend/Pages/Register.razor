@page "/Register"
@using BusinessLogic.Entities
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Register</h3>
<p>
     <label for="name">Name:</label>
     <input type="text" id="name" @bind="@Name"/>
</p>
<p>
    <label for="email">Email:</label>
    <input type="email" id="email" @bind="@Email"/>
</p>
<p>
    <label for="username">Username:</label>
    <input type="text" id="username" @bind="@Username"/>
</p>
<p>
    <label for="password">Password:</label>
    <input type="password" id="password" @bind="@Password"/>
</p>

<p>@registerMessage</p>
<p>
    <button @onclick="PerformRegister">Register</button>
</p>

@code {
    private string Email { get; set; }
    private string Username { get; set; }
    private string Password { get; set; }
    private string Name { get; set; }
    private string registerMessage;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await GetCurrentUser();
        if (currentUser != null)
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task PerformRegister()
    {
        var request = new RegistrationRequest
        {
            Email = Email,
            Username = Username,
            Password = Password,
            Name = Name,
            Role = "User"
        };

        var response = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/auth/register", request);

        if (response.IsSuccessStatusCode)
        {
            var registrationResponse = await response.Content.ReadFromJsonAsync<RegistrationResponse>();
            var token = registrationResponse.Token;
            var auth = registrationResponse.Auth;

            var userJson = JsonSerializer.Serialize(auth);
            await JSRuntime.InvokeAsync<object>("sessionStorage.setItem", "user", userJson);

            NavigationManager.NavigateTo("/", true);

            registerMessage = "Registration successful!";
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            registerMessage = "Registration failed: " + errorMessage;
        }
    }

    private async Task<AuthDto> GetCurrentUser()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        return JsonSerializer.Deserialize<AuthDto>(userJson);
    }
}
