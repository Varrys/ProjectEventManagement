@using System.Text.Json
@using BusinessLogic.Entities
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Frontend.Components

@if (CurrentUser != null)
{
    <text>Hello, @CurrentUser.Username!</text>
    <ButtonLogout />
}
else
{
    <a href="/login">Log in</a>
}

@code {
    private AuthDto CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await GetCurrentUser();
    }

    private async Task<AuthDto> GetCurrentUser()
    {
        var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJson))
        {
            return JsonSerializer.Deserialize<AuthDto>(userJson);
        }
        return null;
    }
}

@*@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@using Frontend.Components
<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity?.Name!
        <ButtonLogout/>
        <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="/login">Log in2</a>
        <ButtonLogout/>
    </NotAuthorized>
</AuthorizeView>

@code{

    private void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }

}*@